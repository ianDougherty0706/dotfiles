# vim:fileencoding=utf-8:foldmethod=marker

#: Fonts {{{

font_family      JetBrainsMono NFM
# bold_italic_font auto

font_size 13.0

# symbol_map

#: E.g. symbol_map U+E0A0-U+E0A3,U+E0C0-U+E0C7 PowerlineSymbols

#: Map the specified Unicode codepoints to a particular font. Useful
#: if you need special rendering for some symbols, such as for
#: Powerline. Avoids the need for patched fonts. Each Unicode code
#: point is specified in the form `U+<code point in hexadecimal>`. You
#: can specify multiple code points, separated by commas and ranges
#: separated by hyphens. This option can be specified multiple times.
#: The syntax is::

#:     symbol_map codepoints Font Family Name

# narrow_symbols

#: E.g. narrow_symbols U+E0A0-U+E0A3,U+E0C0-U+E0C7 1

#: Usually, for Private Use Unicode characters and some symbol/dingbat
#: characters, if the character is followed by one or more spaces,
#: kitty will use those extra cells to render the character larger, if
#: the character in the font has a wide aspect ratio. Using this
#: option you can force kitty to restrict the specified code points to
#: render in the specified number of cells (defaulting to one cell).
#: This option can be specified multiple times. The syntax is::

#:     narrow_symbols codepoints [optionally the number of cells]

disable_ligatures always

font_features none

# modify_font

#: Modify font characteristics such as the position or thickness of
#: the underline and strikethrough. The modifications can have the
#: suffix px for pixels or % for percentage of original value. No
#: suffix means use pts. For example::

#:     modify_font underline_position -2
#:     modify_font underline_thickness 150%
#:     modify_font strikethrough_position 2px

#: Additionally, you can modify the size of the cell in which each
#: font glyph is rendered and the baseline at which the glyph is
#: placed in the cell. For example::

#:     modify_font cell_width 80%
#:     modify_font cell_height -2px
#:     modify_font baseline 3

#: Note that modifying the baseline will automatically adjust the
#: underline and strikethrough positions by the same amount.
#: Increasing the baseline raises glyphs inside the cell and
#: decreasing it lowers them. Decreasing the cell size might cause
#: rendering artifacts, so use with care.

# undercurl_style thin-sparse

#: The style with which undercurls are rendered. This option takes the
#: form (thin|thick)-(sparse|dense). Thin and thick control the
#: thickness of the undercurl. Sparse and dense control how often the
#: curl oscillates. With sparse the curl will peak once per character,
#: with dense twice. Changing this option dynamically via reloading
#: the config or remote control is undefined.

underline_exclusion 1

text_composition_strategy platform
#: }}}

#: Text cursor customization {{{

cursor_shape_unfocused hollow

cursor_blink_interval -1

cursor_stop_blinking_after 0

# cursor_trail 0

# cursor_trail_decay 0.1 0.4

# cursor_trail_start_threshold 2

#: }}}

#: Scrollback {{{

scrollback_lines 10000

# scrollback_pager less --chop-long-lines --RAW-CONTROL-CHARS +INPUT_LINE_NUMBER

scrollback_pager_history_size 0

scrollback_fill_enlarged_window yes

# wheel_scroll_multiplier 5.0

#: Multiplier for the number of lines scrolled by the mouse wheel.
#: Note that this is only used for low precision scrolling devices,
#: not for high precision scrolling devices on platforms such as macOS
#: and Wayland. Use negative numbers to change scroll direction. See
#: also wheel_scroll_min_lines.

# wheel_scroll_min_lines 1

#: The minimum number of lines scrolled by the mouse wheel. The scroll
#: multiplier wheel_scroll_multiplier only takes effect after it
#: reaches this number. Note that this is only used for low precision
#: scrolling devices like wheel mice that scroll by very small amounts
#: when using the wheel. With a negative number, the minimum number of
#: lines will always be added.

# touch_scroll_multiplier 1.0

#: Multiplier for the number of lines scrolled by a touchpad. Note
#: that this is only used for high precision scrolling devices on
#: platforms such as macOS and Wayland. Use negative numbers to change
#: scroll direction.

#: }}}

#: Mouse {{{

mouse_hide_wait -1

open_url_with default

url_prefixes file ftp ftps gemini git gopher http https irc ircs kitty mailto news sftp ssh

detect_urls yes

show_hyperlink_targets yes

underline_hyperlinks always

copy_on_select clipboard

#: Copy to clipboard or a private buffer on select. With this set to
#: clipboard, selecting text with the mouse will cause the text to be
#: copied to clipboard. Useful on platforms such as macOS that do not
#: have the concept of primary selection. You can instead specify a
#: name such as a1 to copy to a private kitty buffer. Map a shortcut
#: with the paste_from_buffer action to paste from this private
#: buffer. For example::

paste_actions quote-urls-at-prompt,confirm

strip_trailing_spaces never

# select_by_word_characters @-./_~?&=%+#

#: Characters considered part of a word when double clicking. In
#: addition to these characters any character that is marked as an
#: alphanumeric character in the Unicode database will be matched.

# select_by_word_characters_forward

#: Characters considered part of a word when extending the selection
#: forward on double clicking. In addition to these characters any
#: character that is marked as an alphanumeric character in the
#: Unicode database will be matched.

#: If empty (default) select_by_word_characters will be used for both
#: directions.

# click_interval -1.0

#: The interval between successive clicks to detect double/triple
#: clicks (in seconds). Negative numbers will use the system default
#: instead, if available, or fallback to 0.5.

focus_follows_mouse yes

# pointer_shape_when_grabbed arrow

#: The shape of the mouse pointer when the program running in the
#: terminal grabs the mouse.

# default_pointer_shape beam

#: The default shape of the mouse pointer.

# pointer_shape_when_dragging beam crosshair

#: The default shape of the mouse pointer when dragging across text.
#: The optional second value sets the shape when dragging in
#: rectangular selection mode.

#: Mouse actions {{{

#: Mouse buttons can be mapped to perform arbitrary actions. The
#: syntax is:

#: .. code-block:: none

#:     mouse_map button-name event-type modes action

#: Where button-name is one of left, middle, right, b1 ... b8 with
#: added keyboard modifiers. For example: ctrl+shift+left refers to
#: holding the Ctrl+Shift keys while clicking with the left mouse
#: button. The value b1 ... b8 can be used to refer to up to eight
#: buttons on a mouse.

#: event-type is one of press, release, doublepress, triplepress,
#: click, doubleclick. modes indicates whether the action is performed
#: when the mouse is grabbed by the program running in the terminal,
#: or not. The values are grabbed or ungrabbed or a comma separated
#: combination of them. grabbed refers to when the program running in
#: the terminal has requested mouse events. Note that the click and
#: double click events have a delay of click_interval to disambiguate
#: from double and triple presses.

#: You can run kitty with the kitty --debug-input command line option
#: to see mouse events. See the builtin actions below to get a sense
#: of what is possible.

#: If you want to unmap a button, map it to nothing. For example, to
#: disable opening of URLs with a plain click::

#:     mouse_map left click ungrabbed

#: See all the mappable actions including mouse actions here
#: <https://sw.kovidgoyal.net/kitty/actions/>.

#: .. note::
#:     Once a selection is started, releasing the button that started it will
#:     automatically end it and no release event will be dispatched.

# clear_all_mouse_actions no

#: Remove all mouse action definitions up to this point. Useful, for
#: instance, to remove the default mouse actions.

#: Click the link under the mouse or move the cursor

# mouse_map left click ungrabbed mouse_handle_click selection link prompt

#::  First check for a selection and if one exists do nothing. Then
#::  check for a link under the mouse cursor and if one exists, click
#::  it. Finally check if the click happened at the current shell
#::  prompt and if so, move the cursor to the click location. Note
#::  that this requires shell integration
#::  <https://sw.kovidgoyal.net/kitty/shell-integration/> to work.

#: Click the link under the mouse or move the cursor even when grabbed

# mouse_map shift+left click grabbed,ungrabbed mouse_handle_click selection link prompt

#::  Same as above, except that the action is performed even when the
#::  mouse is grabbed by the program running in the terminal.

#: Click the link under the mouse cursor

# mouse_map ctrl+shift+left release grabbed,ungrabbed mouse_handle_click link

#::  Variant with Ctrl+Shift is present because the simple click based
#::  version has an unavoidable delay of click_interval, to
#::  disambiguate clicks from double clicks.

#: Discard press event for link click

# mouse_map ctrl+shift+left press grabbed discard_event

#::  Prevent this press event from being sent to the program that has
#::  grabbed the mouse, as the corresponding release event is used to
#::  open a URL.

#: Paste from the primary selection

# mouse_map middle release ungrabbed paste_from_selection

#: Start selecting text

# mouse_map left press ungrabbed mouse_selection normal

#: Start selecting text in a rectangle

# mouse_map ctrl+alt+left press ungrabbed mouse_selection rectangle

#: Select a word

# mouse_map left doublepress ungrabbed mouse_selection word

#: Select a line

# mouse_map left triplepress ungrabbed mouse_selection line

#: Select line from point

# mouse_map ctrl+alt+left triplepress ungrabbed mouse_selection line_from_point

#::  Select from the clicked point to the end of the line. If you
#::  would like to select the word at the point and then extend to the
#::  rest of the line, change `line_from_point` to
#::  `word_and_line_from_point`.

#: Extend the current selection

# mouse_map right press ungrabbed mouse_selection extend

#::  If you want only the end of the selection to be moved instead of
#::  the nearest boundary, use move-end instead of extend.

#: Paste from the primary selection even when grabbed

# mouse_map shift+middle release ungrabbed,grabbed paste_selection
# mouse_map shift+middle press grabbed discard_event

#: Start selecting text even when grabbed

# mouse_map shift+left press ungrabbed,grabbed mouse_selection normal

#: Start selecting text in a rectangle even when grabbed

# mouse_map ctrl+shift+alt+left press ungrabbed,grabbed mouse_selection rectangle

#: Select a word even when grabbed

# mouse_map shift+left doublepress ungrabbed,grabbed mouse_selection word

#: Select a line even when grabbed

# mouse_map shift+left triplepress ungrabbed,grabbed mouse_selection line

#: Select line from point even when grabbed

# mouse_map ctrl+shift+alt+left triplepress ungrabbed,grabbed mouse_selection line_from_point

#::  Select from the clicked point to the end of the line even when
#::  grabbed. If you would like to select the word at the point and
#::  then extend to the rest of the line, change `line_from_point` to
#::  `word_and_line_from_point`.

#: Extend the current selection even when grabbed

# mouse_map shift+right press ungrabbed,grabbed mouse_selection extend

#: Show clicked command output in pager

# mouse_map ctrl+shift+right press ungrabbed mouse_show_command_output

#::  Requires shell integration
#::  <https://sw.kovidgoyal.net/kitty/shell-integration/> to work.

#: }}}

#: }}}

# window settings{{{
sync_to_monitor yes

enable_audio_bell no

# enabled_layouts *

#: The enabled window layouts. A comma separated list of layout names.
#: The special value all means all layouts. The first listed layout
#: will be used as the startup layout. Default configuration is all
#: layouts in alphabetical order. For a list of available layouts, see
#: the layouts <https://sw.kovidgoyal.net/kitty/overview/#layouts>.

window_resize_step_cells 1
window_resize_step_lines 1

window_border_width 1pt

draw_minimal_borders yes

window_margin_width 0
single_window_margin_width -1

#: The window margin to use when only a single window is visible (in
#: pts). Negative values will cause the value of window_margin_width
#: to be used instead. A single value sets all four sides. Two values
#: set the vertical and horizontal sides. Three values set top,
#: horizontal and bottom. Four values set top, right, bottom and left.

window_padding_width 0 1.5 0
single_window_padding_width -1

#: The window padding to use when only a single window is visible (in
#: pts). Negative values will cause the value of window_padding_width
#: to be used instead. A single value sets all four sides. Two values
#: set the vertical and horizontal sides. Three values set top,
#: horizontal and bottom. Four values set top, right, bottom and left.

placement_strategy center

# active_border_color #00ff00

#: The color for the border of the active window. Set this to none to
#: not draw borders around the active window.

# inactive_border_color #cccccc

#: The color for the border of inactive windows.

# inactive_text_alpha 1.0

#: Fade the text in inactive windows by the specified amount (a number
#: between zero and one, with zero being fully faded).

hide_window_decorations yes

resize_debounce_time 0.2 0.5

resize_in_steps no

confirm_os_window_close -1
# }}}

#: Tab bar {{{

tab_bar_edge top

tab_bar_margin_width 2.0

# tab_bar_margin_height 0.0 0.0

#: The margin above and below the tab bar (in pts). The first number
#: is the margin between the edge of the OS Window and the tab bar.
#: The second number is the margin between the tab bar and the
#: contents of the current tab.

tab_bar_style separator 

tab_bar_align left
#: The horizontal alignment of the tab bar, can be one of: left,
#: center, right.

tab_bar_min_tabs 2

tab_switch_strategy previous

tab_separator " | "

tab_title_max_length 10

# tab_title_template "{fmt.fg.red}{bell_symbol}{activity_symbol}{fmt.fg.tab}{tab.last_focused_progress_percent}{title}"

#: }}}

#: Advanced {{{

# shell .

#: The shell program to execute. The default value of . means to use
#: the value of of the SHELL environment variable or if unset,
#: whatever shell is set as the default shell for the current user.
#: Note that on macOS if you change this, you might need to add
#: --login and --interactive to ensure that the shell starts in
#: interactive mode and reads its startup rc files. Environment
#: variables are expanded in this setting.

editor nvim

# close_on_child_death no

#: Close the window when the child process (usually the shell) exits.
#: With the default value no, the terminal will remain open when the
#: child exits as long as there are still other processes outputting
#: to the terminal (for example disowned or backgrounded processes).
#: When enabled with yes, the window will close as soon as the child
#: process exits. Note that setting it to yes means that any
#: background processes still using the terminal can fail silently
#: because their stdout/stderr/stdin no longer work.

# remote_control_password

#: Allow other programs to control kitty using passwords. This option
#: can be specified multiple times to add multiple passwords. If no
#: passwords are present kitty will ask the user for permission if a
#: program tries to use remote control with a password. A password can
#: also *optionally* be associated with a set of allowed remote
#: control actions. For example::

#:     remote_control_password "my passphrase" get-colors set-colors focus-window focus-tab

#: Only the specified actions will be allowed when using this
#: password. Glob patterns can be used too, for example::

#:     remote_control_password "my passphrase" set-tab-* resize-*

#: To get a list of available actions, run::

#:     kitten @ --help

#: A set of actions to be allowed when no password is sent can be
#: specified by using an empty password. For example::

#:     remote_control_password "" *-colors

#: Finally, the path to a python module can be specified that provides
#: a function is_cmd_allowed that is used to check every remote
#: control command. For example::

#:     remote_control_password "my passphrase" my_rc_command_checker.py

#: Relative paths are resolved from the kitty configuration directory.
#: See rc_custom_auth <https://sw.kovidgoyal.net/kitty/remote-
#: control/#rc-custom-auth> for details.

# allow_remote_control no

#: Allow other programs to control kitty. If you turn this on, other
#: programs can control all aspects of kitty, including sending text
#: to kitty windows, opening new windows, closing windows, reading the
#: content of windows, etc. Note that this even works over SSH
#: connections. The default setting of no prevents any form of remote
#: control. The meaning of the various values are:

#: password
#:     Remote control requests received over both the TTY device and the socket
#:     are confirmed based on passwords, see remote_control_password.

#: socket-only
#:     Remote control requests received over a socket are accepted
#:     unconditionally. Requests received over the TTY are denied.
#:     See listen_on.

#: socket
#:     Remote control requests received over a socket are accepted
#:     unconditionally. Requests received over the TTY are confirmed based on
#:     password.

#: no
#:     Remote control is completely disabled.

#: yes
#:     Remote control requests are always accepted.

# listen_on none

#: Listen to the specified socket for remote control connections. Note
#: that this will apply to all kitty instances. It can be overridden
#: by the kitty --listen-on command line option. For UNIX sockets,
#: such as unix:${TEMP}/mykitty or unix:@mykitty (on Linux).
#: Environment variables are expanded and relative paths are resolved
#: with respect to the temporary directory. If {kitty_pid} is present,
#: then it is replaced by the PID of the kitty process, otherwise the
#: PID of the kitty process is appended to the value, with a hyphen.
#: For TCP sockets such as tcp:localhost:0 a random port is always
#: used even if a non-zero port number is specified.  See the help for
#: kitty --listen-on for more details. Note that this will be ignored
#: unless allow_remote_control is set to either: yes, socket or
#: socket-only. Changing this option by reloading the config is not
#: supported.

# env

#: Specify the environment variables to be set in all child processes.
#: Using the name with an equal sign (e.g. env VAR=) will set it to
#: the empty string. Specifying only the name (e.g. env VAR) will
#: remove the variable from the child process' environment. Note that
#: environment variables are expanded recursively, for example::

#:     env VAR1=a
#:     env VAR2=${HOME}/${VAR1}/b

#: The value of VAR2 will be <path to home directory>/a/b.

# filter_notification

#: Specify rules to filter out notifications sent by applications
#: running in kitty. Can be specified multiple times to create
#: multiple filter rules. A rule specification is of the form
#: field:regexp. A filter rule can match on any of the fields: title,
#: body, app, type. The special value of all filters out all
#: notifications. Rules can be combined using Boolean operators. Some
#: examples::

#:     filter_notification title:hello or body:"abc.*def"
#:     # filter out notification from vim except for ones about updates, (?i)
#:     # makes matching case insensitive.
#:     filter_notification app:"[ng]?vim" and not body:"(?i)update"
#:     # filter out all notifications
#:     filter_notification all

#: The field app is the name of the application sending the
#: notification and type is the type of the notification. Not all
#: applications will send these fields, so you can also match on the
#: title and body of the notification text. More sophisticated
#: programmatic filtering and custom actions on notifications can be
#: done by creating a notifications.py file in the kitty config
#: directory (~/.config/kitty). An annotated sample is available
#: <https://github.com/kovidgoyal/kitty/blob/master/docs/notifications.py>.

# watcher

#: Path to python file which will be loaded for watchers
#: <https://sw.kovidgoyal.net/kitty/launch/#watchers>. Can be
#: specified more than once to load multiple watchers. The watchers
#: will be added to every kitty window. Relative paths are resolved
#: relative to the kitty config directory. Note that reloading the
#: config will only affect windows created after the reload.

# exe_search_path

#: Control where kitty finds the programs to run. The default search
#: order is: First search the system wide PATH, then ~/.local/bin and
#: ~/bin. If still not found, the PATH defined in the login shell
#: after sourcing all its startup files is tried. Finally, if present,
#: the PATH specified by the env option is tried.

#: This option allows you to prepend, append, or remove paths from
#: this search order. It can be specified multiple times for multiple
#: paths. A simple path will be prepended to the search order. A path
#: that starts with the + sign will be append to the search order,
#: after ~/bin above. A path that starts with the - sign will be
#: removed from the entire search order. For example::

#:     exe_search_path /some/prepended/path
#:     exe_search_path +/some/appended/path
#:     exe_search_path -/some/excluded/path

# update_check_interval 24

#: The interval to periodically check if an update to kitty is
#: available (in hours). If an update is found, a system notification
#: is displayed informing you of the available update. The default is
#: to check every 24 hours, set to zero to disable. Update checking is
#: only done by the official binary builds. Distro packages or source
#: builds do not do update checking. Changing this option by reloading
#: the config is not supported.

# startup_session none

#: Path to a session file to use for all kitty instances. Can be
#: overridden by using the kitty --session =none command line option
#: for individual instances. See sessions
#: <https://sw.kovidgoyal.net/kitty/overview/#sessions> in the kitty
#: documentation for details. Note that relative paths are interpreted
#: with respect to the kitty config directory. Environment variables
#: in the path are expanded. Changing this option by reloading the
#: config is not supported. Note that if kitty is invoked with command
#: line arguments specifying a command to run, this option is ignored.

clipboard_control write-clipboard write-primary read-clipboard-ask read-primary-ask

#: Allow programs running in kitty to read and write from the
#: clipboard. You can control exactly which actions are allowed. The
#: possible actions are: write-clipboard, read-clipboard, write-
#: primary, read-primary, read-clipboard-ask, read-primary-ask. The
#: default is to allow writing to the clipboard and primary selection
#: and to ask for permission when a program tries to read from the
#: clipboard. Note that disabling the read confirmation is a security
#: risk as it means that any program, even the ones running on a
#: remote server via SSH can read your clipboard. See also
#: clipboard_max_size.

clipboard_max_size 512

#: The maximum size (in MB) of data from programs running in kitty
#: that will be stored for writing to the system clipboard. A value of
#: zero means no size limit is applied. See also clipboard_control.

# file_transfer_confirmation_bypass

#: The password that can be supplied to the file transfer kitten
#: <https://sw.kovidgoyal.net/kitty/kittens/transfer/> to skip the
#: transfer confirmation prompt. This should only be used when
#: initiating transfers from trusted computers, over trusted networks
#: or encrypted transports, as it allows any programs running on the
#: remote machine to read/write to the local filesystem, without
#: permission.

allow_hyperlinks yes ask

# shell_integration enabled

#: Enable shell integration on supported shells. This enables features
#: such as jumping to previous prompts, browsing the output of the
#: previous command in a pager, etc. on supported shells. Set to
#: disabled to turn off shell integration, completely. It is also
#: possible to disable individual features, set to a space separated
#: list of these values: no-rc, no-cursor, no-title, no-cwd, no-
#: prompt-mark, no-complete, no-sudo. See Shell integration
#: <https://sw.kovidgoyal.net/kitty/shell-integration/> for details.

# allow_cloning ask

#: Control whether programs running in the terminal can request new
#: windows to be created. The canonical example is clone-in-kitty
#: <https://sw.kovidgoyal.net/kitty/shell-integration/#clone-shell>.
#: By default, kitty will ask for permission for each clone request.
#: Allowing cloning unconditionally gives programs running in the
#: terminal (including over SSH) permission to execute arbitrary code,
#: as the user who is running the terminal, on the computer that the
#: terminal is running on.

# clone_source_strategies venv,conda,env_var,path

#: Control what shell code is sourced when running clone-in-kitty in
#: the newly cloned window. The supported strategies are:

#: venv
#:     Source the file $VIRTUAL_ENV/bin/activate. This is used by the
#:     Python stdlib venv module and allows cloning venvs automatically.
#: conda
#:     Run conda activate $CONDA_DEFAULT_ENV. This supports the virtual
#:     environments created by conda.
#: env_var
#:     Execute the contents of the environment variable
#:     KITTY_CLONE_SOURCE_CODE with eval.
#: path
#:     Source the file pointed to by the environment variable
#:     KITTY_CLONE_SOURCE_PATH.

#: This option must be a comma separated list of the above values.
#: Only the first valid match, in the order specified, is sourced.

# notify_on_cmd_finish never

#: Show a desktop notification when a long-running command finishes
#: (needs shell_integration). The possible values are:

#: never
#:     Never send a notification.

#: unfocused
#:     Only send a notification when the window does not have keyboard focus.

#: invisible
#:     Only send a notification when the window both is unfocused and not visible
#:     to the user, for example, because it is in an inactive tab or its OS window
#:     is not currently visible (on platforms that support OS window visibility querying
#:     this considers an OS Window visible iff it is active).

#: always
#:     Always send a notification, regardless of window state.

#: There are two optional arguments:

#: First, the minimum duration for what is considered a long running
#: command. The default is 5 seconds. Specify a second argument to set
#: the duration. For example: invisible 15. Do not set the value too
#: small, otherwise a command that launches a new OS Window and exits
#: will spam a notification.

#: Second, the action to perform. The default is notify. The possible
#: values are:

#: notify
#:     Send a desktop notification. The subsequent arguments are optional and specify when
#:     the notification is automatically cleared. The set of possible events when the notification is
#:     cleared are: focus and next. focus means that when the notification
#:     policy is unfocused or invisible the notification is automatically cleared
#:     when the window regains focus. The value of next means that the previous notification
#:     is cleared when the next notification is shown. The default when no arguments are specified
#:     is: focus next.

#: bell
#:     Ring the terminal bell.

#: command
#:     Run a custom command. All subsequent arguments are the cmdline to run.

#: Some more examples::

#:     # Send a notification when a command takes more than 5 seconds in an unfocused window
#:     notify_on_cmd_finish unfocused
#:     # Send a notification when a command takes more than 10 seconds in a invisible window
#:     notify_on_cmd_finish invisible 10.0
#:     # Ring a bell when a command takes more than 10 seconds in a invisible window
#:     notify_on_cmd_finish invisible 10.0 bell
#:     # Run 'notify-send' when a command takes more than 10 seconds in a invisible window
#:     # Here %c is replaced by the current command line and %s by the job exit code
#:     notify_on_cmd_finish invisible 10.0 command notify-send "job finished with status: %s" %c
#:     # Do not clear previous notification when next command finishes or window regains focus
#:     notify_on_cmd_finish invisible 5.0 notify

# term xterm-kitty

#: The value of the TERM environment variable to set. Changing this
#: can break many terminal programs, only change it if you know what
#: you are doing, not because you read some advice on "Stack Overflow"
#: to change it. The TERM variable is used by various programs to get
#: information about the capabilities and behavior of the terminal. If
#: you change it, depending on what programs you run, and how
#: different the terminal you are changing it to is, various things
#: from key-presses, to colors, to various advanced features may not
#: work. Changing this option by reloading the config will only affect
#: newly created windows.

# terminfo_type path

#: The value of the TERMINFO environment variable to set. This
#: variable is used by programs running in the terminal to search for
#: terminfo databases. The default value of path causes kitty to set
#: it to a filesystem location containing the kitty terminfo database.
#: A value of direct means put the entire database into the env var
#: directly. This can be useful when connecting to containers, for
#: example. But, note that not all software supports this. A value of
#: none means do not touch the variable.

# forward_stdio no

#: Forward STDOUT and STDERR of the kitty process to child processes.
#: This is useful for debugging as it allows child processes to print
#: to kitty's STDOUT directly. For example, echo hello world
#: >&$KITTY_STDIO_FORWARDED in a shell will print to the parent
#: kitty's STDOUT. Sets the KITTY_STDIO_FORWARDED=fdnum environment
#: variable so child processes know about the forwarding. Note that on
#: macOS this prevents the shell from being run via the login utility
#: so getlogin() will not work in programs run in this session.

# menu_map

#: Specify entries for various menus in kitty. Currently only the
#: global menubar on macOS is supported. For example::

#:    menu_map global "Actions::Launch something special" launch --hold --type=os-window sh -c "echo hello world"

#: This will create a menu entry named "Launch something special" in
#: an "Actions" menu in the macOS global menubar. Sub-menus can be
#: created by adding more levels separated by the :: characters.

#: }}}

#: OS specific tweaks {{{

linux_display_server auto

wayland_enable_ime no

#: }}}

#: Keyboard shortcuts {{{

#: Keys are identified simply by their lowercase Unicode characters.
#: For example: a for the A key, [ for the left square bracket key,
#: etc. For functional keys, such as Enter or Escape, the names are
#: present at Functional key definitions
#: <https://sw.kovidgoyal.net/kitty/keyboard-protocol/#functional>.
#: For modifier keys, the names are ctrl (control, ⌃), shift (⇧), alt
#: (opt, option, ⌥), super (cmd, command, ⌘).

#: Simple shortcut mapping is done with the map directive. For full
#: details on advanced mapping including modal and per application
#: maps, see mapping <https://sw.kovidgoyal.net/kitty/mapping/>. Some
#: quick examples to illustrate common tasks::

#:     # unmap a keyboard shortcut, passing it to the program running in kitty
#:     map kitty_mod+space
#:     # completely ignore a keyboard event
#:     map ctrl+alt+f1 discard_event
#:     # combine multiple actions
#:     map kitty_mod+e combine : new_window : next_layout
#:     # multi-key shortcuts
#:     map ctrl+x>ctrl+y>z action

#: The full list of actions that can be mapped to key presses is
#: available here <https://sw.kovidgoyal.net/kitty/actions/>.

kitty_mod ctrl+shift

#: Special modifier key alias for default shortcuts. You can change
#: the value of this option to alter all default shortcuts that use
#: kitty_mod.

# clear_all_shortcuts no

#: Remove all shortcut definitions up to this point. Useful, for
#: instance, to remove the default shortcuts.

# action_alias

action_alias launch_tab launch --type=tab --cwd=current

#: Define action aliases to avoid repeating the same options in
#: multiple mappings. Aliases can be defined for any action and will
#: be expanded recursively. For example, the above alias allows you to
#: create mappings to launch a new tab in the current working
#: directory without duplication::

map f1 launch_tab nvim

#: Similarly, to alias kitten invocation::

#:     action_alias hints kitten hints --hints-offset=0

# kitten_alias

#: E.g. kitten_alias hints hints --hints-offset=0

#: Like action_alias above, but specifically for kittens. Generally,
#: prefer to use action_alias. This option is a legacy version,
#: present for backwards compatibility. It causes all invocations of
#: the aliased kitten to be substituted. So the example above will
#: cause all invocations of the hints kitten to have the --hints-
#: offset=0 option applied.

#: Clipboard {{{

#copy
map kitty_mod+c copy_to_clipboard
#paste
map kitty_mod+v paste_from_clipboard
#: Paste from selection
kitty_mod+s  paste_from_selection

#: }}}

#: Scrolling {{{

#: Scroll line up
map kitty_mod+k scroll_line_up
#: Scroll line down
map kitty_mod+j scroll_line_down

#: Browse scrollback buffer in pager
map kitty_mod+h show_scrollback

#: Browse output of the last shell command in pager
map kitty_mod+g show_last_command_output

#: }}}

#: Window management {{{

#: New window
map kitty_mod+enter new_window
#::      map ctrl+alt+enter launch --cwd=current

#: Close window
map kitty_mod+w close_window

#: Next window

# map kitty_mod+] next_window

#: Previous window

# map kitty_mod+[ previous_window

#: Move window forward

# map kitty_mod+f move_window_forward

#: Move window backward

# map kitty_mod+b move_window_backward

#: Move window to top

# map kitty_mod+` move_window_to_top

#: Start resizing window

# map kitty_mod+r start_resizing_window
# map cmd+r       start_resizing_window

#: Visually select and focus window

map kitty_mod+f7 focus_visible_window

#: }}}

#: Tab management {{{

#: Next tab
map kitty_mod+l next_tab
#: Previous tab
map kitty_mod+h previous_tab

#: New tab
map kitty_mod+t new_tab

#: Close tab
map kitty_mod+q close_tab

#: Close OS window
map shift+cmd+w close_os_window

#: Move tab forward
map kitty_mod+. move_tab_forward

#: Move tab backward
map kitty_mod+, move_tab_backward

#: Set tab title
map kitty_mod+alt+t set_tab_title

#: }}}

#: Font sizes {{{

#: Increase font size
map kitty_mod+plus   change_font_size all +2.0

#: Decrease font size
map kitty_mod+minus       change_font_size all -2.0

#: Reset font size
map kitty_mod+backspace change_font_size all 0

#: }}}

#: Miscellaneous {{{

#: Show documentation
map kitty_mod+f1 show_kitty_doc overview

#: Toggle fullscreen
map kitty_mod+f toggle_fullscreen

#: Unicode input
map kitty_mod+u    kitten unicode_input

#::  Some useful functions that can be defined in the shell rc files
#::  to perform various kinds of clearing of the current window:

#::  .. code-block:: sh

#::      clear-only-screen() {
#::          printf "\e[H\e[2J"
#::      }

#::      clear-screen-and-scrollback() {
#::          printf "\e[H\e[3J"
#::      }

#::      clear-screen-saving-contents-in-scrollback() {
#::          printf "\e[H\e[22J"
#::      }

#::  For instance, using these escape codes, it is possible to remap
#::  Ctrl+L to both scroll the current screen contents into the
#::  scrollback buffer and clear the screen, instead of just clearing
#::  the screen. For ZSH, in ~/.zshrc, add:

#::  .. code-block:: zsh

#::      ctrl_l() {
#::          builtin print -rn -- $'\r\e[0J\e[H\e[22J' >"$TTY"
#::          builtin zle .reset-prompt
#::          builtin zle -R
#::      }
#::      zle -N ctrl_l
#::      bindkey '^l' ctrl_l

#::  Alternatively, you can just add map ctrl+l clear_terminal
#::  to_cursor_scroll active to kitty.conf which works with no changes
#::  to the shell rc files, but only clears up to the prompt, it does
#::  not clear any text at the prompt itself.

#: Clear to start
map cmd+k clear_terminal to_cursor active

#: Clear scrollback
map option+cmd+k clear_terminal scrollback active

#: Clear screen
map cmd+ctrl+l clear_terminal to_cursor_scroll active

#: Reload kitty.conf
map kitty_mod+f5 load_config_file

#: Debug kitty configuration
map kitty_mod+f6 debug_config

#: Send arbitrary text on key presses
#::  E.g. map ctrl+shift+alt+h send_text all Hello World

#::  You can tell kitty to send arbitrary (UTF-8) encoded text to the
#::  client program when pressing specified shortcut keys. For
#::  example::

#::      map ctrl+alt+a send_text all Special text

#::  This will send "Special text" when you press the Ctrl+Alt+A key
#::  combination. The text to be sent decodes ANSI C escapes
#::  <https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-
#::  Quoting.html> so you can use escapes like \e to send control
#::  codes or \u21fb to send Unicode characters (or you can just input
#::  the Unicode characters directly as UTF-8 text). You can use
#::  `kitten show-key` to get the key escape codes you want to
#::  emulate.

#::  The first argument to send_text is the keyboard modes in which to
#::  activate the shortcut. The possible values are normal,
#::  application, kitty or a comma separated combination of them. The
#::  modes normal and application refer to the DECCKM cursor key mode
#::  for terminals, and kitty refers to the kitty extended keyboard
#::  protocol. The special value all means all of them.

#::  Some more examples::

#::      # Output a word and move the cursor to the start of the line (like typing and pressing Home)
#::      map ctrl+alt+a send_text normal Word\e[H
#::      map ctrl+alt+a send_text application Word\eOH
#::      # Run a command at a shell prompt (like typing the command and pressing Enter)
#::      map ctrl+alt+a send_text normal,application some command with arguments\r

#: }}}

#: }}}

## name:     Catppuccin Kitty Mocha{{{
## author:   Catppuccin Org
## license:  MIT
## upstream: https://github.com/catppuccin/kitty/blob/main/themes/mocha.conf
## blurb:    Soothing pastel theme for the high-spirited!



# The basic colors
foreground              #cdd6f4
background              #1e1e2e
selection_foreground    #1e1e2e
selection_background    #f5e0dc

# Cursor colors
cursor                  #f5e0dc
cursor_text_color       #1e1e2e

# URL underline color when hovering with mouse
url_color               #f5e0dc

# Kitty window border colors
active_border_color     #b4befe
inactive_border_color   #6c7086
bell_border_color       #f9e2af

# OS Window titlebar colors
wayland_titlebar_color system
macos_titlebar_color system

# Tab bar colors
active_tab_foreground   #11111b
active_tab_background   #cba6f7
inactive_tab_foreground #cdd6f4
inactive_tab_background #181825
tab_bar_background      #11111b

# Colors for marks (marked text in the terminal)
mark1_foreground #1e1e2e
mark1_background #b4befe
mark2_foreground #1e1e2e
mark2_background #cba6f7
mark3_foreground #1e1e2e
mark3_background #74c7ec

# The 16 terminal colors

# black
color0 #45475a
color8 #585b70

# red
color1 #f38ba8
color9 #f38ba8

# green
color2  #a6e3a1
color10 #a6e3a1

# yellow
color3  #f9e2af
color11 #f9e2af

# blue
color4  #89b4fa
color12 #89b4fa

# magenta
color5  #f5c2e7
color13 #f5c2e7

# cyan
color6  #94e2d5
color14 #94e2d5

# white
color7  #bac2de
color15 #a6adc8}}}
